import javafx.scene.effect.Reflection;

import java.lang.reflect.Constructor;

public class ProducerConsumer {

    public static void main(String[] args) {

        /*
         * Producer and Consumer problem (also called a bounded-buffer problem).
         * The goal is for the Producer to generate data which the consumer removes one at a time.
         */
        Holder data = new Holder();
        int numValuesToGenerate = 10;

        // create and start the threads
        Thread producerThread = new Thread(new Producer(data, numValuesToGenerate));
        Thread consumerThread = new Thread(new Consumer(data, numValuesToGenerate));

        System.out.println("Starting threads.......");

        producerThread.start();
        consumerThread.start();

        try {
            producerThread.join();
            consumerThread.join();
            System.out.println("Both finished executing!");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

}

class Holder {

    /*
     * This class holds all of the values generated by the producer and it will
     * contain synchronized methods for getting and setting values.
     */

    int contents = 0;
    private boolean isAvailable = false;

    public synchronized int getVal() {

        // this will return the value of the holder to
        // the consumer-- it's read by the consumer thread

        while (isAvailable == false) {
            try {
                wait(); // wait() forces the current thread to wait until some other thread invokes
                // notify() or
                // notifyAll() on the same object
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        isAvailable = false;
        notifyAll();

        return contents;
    }

    public synchronized void setVal(int val) {

        // this will allow values to be generated by a producer thread
        while (isAvailable == true) {
            try {
                wait(); // wait for a value to be generated by a producer
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        contents = val; // set the value to be eventually consumed
        isAvailable = true;
        notifyAll();
    }

}

class Producer implements Runnable {

    public Holder data;
    int max;

    public Producer(Holder data, int max) {
        super();
        this.data = data;
        this.max = max;
    }

    @Override
    public void run() {
        // loop and set values in the Holder
        for (int i = 0; i < max; i++) {
            this.data.setVal(i); // set a value on the holder object
            System.out.println("producer put: " + i);
        }
    }
}

class Consumer implements Runnable {

    public Holder data;
    int max;

    public Consumer(Holder data, int max) {
        super();
        this.data = data;
        this.max = max;
    }

    @Override
    public void run() {
        // loop and retrieve values
        for (int i = 0; i < max; i++) {

            int currentVal = this.data.getVal();
            System.out.println("Consumer got: " + currentVal);
        }

    }

}
